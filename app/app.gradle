plugins {
    id "com.banner.versions.ribbonizer" version "1.2.5"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion(rootProject.ext.compileSdk)

    defaultConfig {
        applicationId "com.nanav.weather"
        minSdkVersion(rootProject.ext.minSdk)
        targetSdkVersion(rootProject.ext.targetSdk)

        versionName "0.0.1"
        manifestPlaceholders = [appName: "DemoWeather"]

        multiDexEnabled false

        buildConfigField "int", "TEST_VERSION", "27"
        buildConfigField "boolean", "DEV", "false"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = defaultConfig.manifestPlaceholders["appName"] + "_" + variant.flavorName + "_" + variant.buildType.name + ".apk"
        }
    }

    compileOptions {
        sourceCompatibility(rootProject.ext.jvmCompileTarget)
        targetCompatibility(rootProject.ext.jvmCompileTarget)
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.jvmCompileTarget
    }

    buildFeatures {
        viewBinding = true
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            manifestPlaceholders = [appNameSuffix: ""]
        }

        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            manifestPlaceholders = [appNameSuffix: " - Dev"]
            applicationIdSuffix ".debug"
            versionNameSuffix "dev"

            buildConfigField "boolean", "DEV", "true"
        }

        qa {
            matchingFallbacks = ['debug']
            debuggable true
            minifyEnabled false
            shrinkResources false
            manifestPlaceholders = [appNameSuffix: " - QA"]
            applicationIdSuffix ".qa"
            versionNameSuffix "qa"
        }
    }

    flavorDimensions rootProject.ext.defaultDimen

    productFlavors {
        standard {
            dimension rootProject.ext.defaultDimen
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/rxjava.properties'
    }

    sourceSets {
        test {
            java.srcDirs += "$projectDir/src/sharedTest/java"
        }

        androidTest {
            java.srcDirs += "$projectDir/src/sharedTest/java"
        }
    }

}

configurations.all {
    resolutionStrategy {
        force 'com.google.guava:guava:22.0'
    }
}

ribbonizer {
    builder { variant, File iconFile ->
        return defaultRibbonFilter(variant, iconFile)
    }
}

apply from: '../testing.gradle'

internalProject('baseapp')

internalLib(rxbinding)
internalLib(appcompat)
internalLib(design)
internalLib(retrofit)
internalLib(constraintlayout)
internalLib(lifecycle)

test(unittest.junit)
test(unittest.mockito)
test(unittest.robolectric)
test(unittest.commons)
test(unittest.androidxTest)
test(unittest.coroutineTest)

dependencies {
}
